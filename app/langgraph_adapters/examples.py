"""
Ejemplos de Uso - Arquitectura H√≠brida LangChain + LangGraph

Este archivo contiene ejemplos completos de c√≥mo usar los componentes
de la arquitectura h√≠brida.

Ejecutar ejemplos:
    python -m app.langgraph_adapters.examples
"""

import logging
from typing import Dict, Any

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def ejemplo_1_agent_adapter():
    """
    Ejemplo 1: Usar AgentAdapter standalone

    Muestra c√≥mo envolver un agente LangChain para obtener
    logging, validaci√≥n y manejo de errores autom√°ticos.
    """
    print("\n" + "="*80)
    print("EJEMPLO 1: AgentAdapter Standalone")
    print("="*80 + "\n")

    from app.langgraph_adapters import AgentAdapter
    from app.agents import SalesAgent
    from app.config.company_config import get_company_config
    from app.services.openai_service import OpenAIService

    # Setup
    company_config = get_company_config("company_default")
    openai_service = OpenAIService()

    # Crear agente LangChain
    sales_agent = SalesAgent(company_config, openai_service)

    # Envolver en adaptador
    adapted = AgentAdapter(
        agent=sales_agent,
        agent_name="sales",
        timeout_ms=30000,
        max_retries=2
    )

    # Ejecutar
    result = adapted.invoke({
        "question": "¬øCu√°nto cuesta el botox?",
        "chat_history": []
    })

    # Mostrar resultado
    print(f"‚úÖ Success: {result['success']}")
    if result['success']:
        print(f"üìù Response: {result['output'][:100]}...")
        print(f"‚è±Ô∏è  Duration: {result['execution_state']['duration_ms']:.2f}ms")
        print(f"üîÑ Retries: {result['retries']}")
    else:
        print(f"‚ùå Error: {result['error']}")

    # Obtener estad√≠sticas
    stats = adapted.get_stats()
    print(f"\nüìä Stats:")
    print(f"   Total executions: {stats['total_executions']}")
    print(f"   Total errors: {stats['total_errors']}")
    print(f"   Error rate: {stats['error_rate']:.2%}")
    print(f"   Avg duration: {stats['average_duration_ms']:.2f}ms")


def ejemplo_2_orchestrator_basico():
    """
    Ejemplo 2: MultiAgentOrchestratorGraph b√°sico

    Muestra c√≥mo usar el orquestador con grafo para
    gestionar m√∫ltiples agentes.
    """
    print("\n" + "="*80)
    print("EJEMPLO 2: MultiAgentOrchestratorGraph B√°sico")
    print("="*80 + "\n")

    from app.langgraph_adapters.orchestrator_graph import MultiAgentOrchestratorGraph
    from app.agents import (
        RouterAgent, SalesAgent, SupportAgent, EmergencyAgent, ScheduleAgent
    )
    from app.config.company_config import get_company_config
    from app.services.openai_service import OpenAIService

    # Setup
    company_config = get_company_config("company_default")
    openai_service = OpenAIService()

    # Crear agentes (LangChain existentes)
    router = RouterAgent(company_config, openai_service)
    sales = SalesAgent(company_config, openai_service)
    support = SupportAgent(company_config, openai_service)
    emergency = EmergencyAgent(company_config, openai_service)
    schedule = ScheduleAgent(company_config, openai_service)

    # Crear orquestador
    orchestrator = MultiAgentOrchestratorGraph(
        router_agent=router,
        agents={
            "sales": sales,
            "support": support,
            "emergency": emergency,
            "schedule": schedule
        },
        company_id=company_config.company_id
    )

    # Test con diferentes preguntas
    test_questions = [
        "¬øCu√°nto cuesta el tratamiento de botox?",
        "Tengo una emergencia, me duele mucho",
        "Quiero agendar una cita para ma√±ana",
        "¬øD√≥nde est√°n ubicados?"
    ]

    for i, question in enumerate(test_questions, 1):
        print(f"\nüìù Test {i}: {question}")
        print("-" * 80)

        response, intent = orchestrator.get_response(
            question=question,
            user_id=f"test_user_{i}",
            chat_history=[]
        )

        print(f"üéØ Intent detected: {intent}")
        print(f"üí¨ Response: {response[:150]}...")

    # Mostrar estad√≠sticas
    print("\n" + "="*80)
    print("üìä Estad√≠sticas Finales")
    print("="*80)

    stats = orchestrator.get_stats()
    print(f"\nRouter:")
    print(f"   Executions: {stats['router']['total_executions']}")
    print(f"   Avg duration: {stats['router']['average_duration_ms']:.2f}ms")

    print(f"\nAgents:")
    for agent_name, agent_stats in stats['agents'].items():
        if agent_stats['total_executions'] > 0:
            print(f"   {agent_name}:")
            print(f"      Executions: {agent_stats['total_executions']}")
            print(f"      Errors: {agent_stats['total_errors']}")
            print(f"      Avg duration: {agent_stats['average_duration_ms']:.2f}ms")


def ejemplo_3_schedule_agent_graph():
    """
    Ejemplo 3: ScheduleAgentGraph con validaciones

    Muestra c√≥mo un agente puede tener su propio grafo interno
    con validaciones paso a paso.
    """
    print("\n" + "="*80)
    print("EJEMPLO 3: ScheduleAgentGraph con Validaciones")
    print("="*80 + "\n")

    from app.langgraph_adapters.schedule_agent_graph import ScheduleAgentGraph
    from app.agents.schedule_agent import ScheduleAgent
    from app.config.company_config import get_company_config
    from app.services.openai_service import OpenAIService

    # Setup
    company_config = get_company_config("company_default")
    openai_service = OpenAIService()

    # Crear agente
    schedule_agent = ScheduleAgent(company_config, openai_service)

    # Envolverlo en grafo
    schedule_graph = ScheduleAgentGraph(
        schedule_agent=schedule_agent,
        enable_checkpointing=False
    )

    # Test con diferentes escenarios
    test_scenarios = [
        {
            "question": "Quiero agendar botox para ma√±ana",
            "description": "Consulta de agendamiento con fecha relativa"
        },
        {
            "question": "¬øCu√°nto cuesta una consulta?",
            "description": "Solo consulta de precio (no agendar)"
        },
        {
            "question": "Necesito agendar para el 15-12-2024",
            "description": "Fecha espec√≠fica"
        }
    ]

    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüìù Escenario {i}: {scenario['description']}")
        print(f"‚ùì Pregunta: {scenario['question']}")
        print("-" * 80)

        response = schedule_graph.get_response(
            question=scenario['question'],
            user_id=f"test_user_{i}",
            chat_history=[]
        )

        print(f"üí¨ Response: {response[:200]}...")


def ejemplo_4_comparacion_api():
    """
    Ejemplo 4: Comparaci√≥n de APIs (Compatibilidad)

    Muestra que la API del MultiAgentOrchestratorGraph es
    100% compatible con la API actual.
    """
    print("\n" + "="*80)
    print("EJEMPLO 4: Comparaci√≥n API - Compatibilidad 100%")
    print("="*80 + "\n")

    from app.services.multi_agent_orchestrator import MultiAgentOrchestrator
    from app.langgraph_adapters.orchestrator_graph import MultiAgentOrchestratorGraph
    from app.agents import (
        RouterAgent, SalesAgent, SupportAgent, EmergencyAgent, ScheduleAgent
    )
    from app.config.company_config import get_company_config
    from app.services.openai_service import OpenAIService
    from app.models.conversation import ConversationManager

    # Setup
    company_config = get_company_config("company_default")
    openai_service = OpenAIService()
    conversation_manager = ConversationManager()

    # 1. Crear MultiAgentOrchestrator ACTUAL
    print("1Ô∏è‚É£ Creando MultiAgentOrchestrator ACTUAL (LangChain puro)")
    orchestrator_old = MultiAgentOrchestrator(
        company_id=company_config.company_id,
        openai_service=openai_service
    )
    print("   ‚úÖ Creado\n")

    # 2. Crear MultiAgentOrchestratorGraph NUEVO
    print("2Ô∏è‚É£ Creando MultiAgentOrchestratorGraph NUEVO (LangChain + LangGraph)")
    router = RouterAgent(company_config, openai_service)
    sales = SalesAgent(company_config, openai_service)
    support = SupportAgent(company_config, openai_service)
    emergency = EmergencyAgent(company_config, openai_service)
    schedule = ScheduleAgent(company_config, openai_service)

    orchestrator_new = MultiAgentOrchestratorGraph(
        router_agent=router,
        agents={
            "sales": sales,
            "support": support,
            "emergency": emergency,
            "schedule": schedule
        },
        company_id=company_config.company_id
    )
    print("   ‚úÖ Creado\n")

    # 3. Comparar firmas de m√©todo
    print("3Ô∏è‚É£ Comparando firmas de m√©todo:")
    print("-" * 80)

    test_question = "¬øCu√°nto cuesta el botox?"

    # API ACTUAL
    print("\nüìå API ACTUAL:")
    print("   orchestrator_old.get_response(")
    print("       question='...',")
    print("       user_id='user123',")
    print("       conversation_manager=conversation_manager")
    print("   )")

    # API NUEVA
    print("\nüìå API NUEVA:")
    print("   orchestrator_new.get_response(")
    print("       question='...',")
    print("       user_id='user123',")
    print("       chat_history=[]")
    print("   )")

    print("\n‚úÖ COMPATIBILIDAD: 100%")
    print("   Ambas APIs retornan: (response: str, agent_used: str)")

    # 4. Ejecutar ambas y comparar
    print("\n4Ô∏è‚É£ Ejecutando ambas implementaciones:")
    print("-" * 80)

    # Ejecutar ACTUAL
    print("\n‚è≥ Ejecutando MultiAgentOrchestrator ACTUAL...")
    try:
        response_old, intent_old = orchestrator_old.get_response(
            question=test_question,
            user_id="test_user",
            conversation_manager=conversation_manager
        )
        print(f"   ‚úÖ Intent: {intent_old}")
        print(f"   ‚úÖ Response length: {len(response_old)} chars")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error (expected si no hay DB): {e}")

    # Ejecutar NUEVO
    print("\n‚è≥ Ejecutando MultiAgentOrchestratorGraph NUEVO...")
    response_new, intent_new = orchestrator_new.get_response(
        question=test_question,
        user_id="test_user",
        chat_history=[]
    )
    print(f"   ‚úÖ Intent: {intent_new}")
    print(f"   ‚úÖ Response length: {len(response_new)} chars")

    # 5. Conclusi√≥n
    print("\n" + "="*80)
    print("‚úÖ CONCLUSI√ìN: API 100% COMPATIBLE")
    print("="*80)
    print("\nVentajas de la nueva implementaci√≥n:")
    print("   ‚Ä¢ Estado centralizado en StateGraph")
    print("   ‚Ä¢ Validaciones expl√≠citas en cada paso")
    print("   ‚Ä¢ Reintentos autom√°ticos con backoff")
    print("   ‚Ä¢ Logging estructurado por nodo")
    print("   ‚Ä¢ M√©tricas de rendimiento autom√°ticas")
    print("   ‚Ä¢ Debugging con checkpointing")
    print("   ‚Ä¢ Escalabilidad mediante grafos modulares")


def ejemplo_5_validadores_personalizados():
    """
    Ejemplo 5: Validadores personalizados

    Muestra c√≥mo agregar validadores personalizados
    a los adaptadores.
    """
    print("\n" + "="*80)
    print("EJEMPLO 5: Validadores Personalizados")
    print("="*80 + "\n")

    from app.langgraph_adapters import AgentAdapter, ValidationResult
    from app.agents import SalesAgent
    from app.config.company_config import get_company_config
    from app.services.openai_service import OpenAIService

    def validate_sales_question(inputs: Dict[str, Any]) -> ValidationResult:
        """Validador personalizado para preguntas de ventas"""
        question = inputs.get("question", "").lower()

        # Keywords de ventas
        sales_keywords = ["precio", "costo", "cu√°nto", "inversi√≥n", "vale"]

        if not any(kw in question for kw in sales_keywords):
            return {
                "is_valid": False,
                "errors": ["La pregunta no parece ser sobre ventas"],
                "warnings": [],
                "metadata": {"question_length": len(question)}
            }

        return {
            "is_valid": True,
            "errors": [],
            "warnings": [],
            "metadata": {"question_length": len(question)}
        }

    # Setup
    company_config = get_company_config("company_default")
    openai_service = OpenAIService()
    sales_agent = SalesAgent(company_config, openai_service)

    # Crear adaptador con validador personalizado
    adapted = AgentAdapter(
        agent=sales_agent,
        agent_name="sales",
        validate_input=validate_sales_question
    )

    # Test con pregunta v√°lida
    print("üìù Test 1: Pregunta v√°lida (contiene 'precio')")
    result1 = adapted.invoke({
        "question": "¬øCu√°l es el precio del botox?",
        "chat_history": []
    })
    print(f"   ‚úÖ Success: {result1['success']}")
    print(f"   Validation: {result1['validation']}")

    # Test con pregunta inv√°lida
    print("\nüìù Test 2: Pregunta inv√°lida (no contiene keywords de ventas)")
    result2 = adapted.invoke({
        "question": "¬øD√≥nde est√°n ubicados?",
        "chat_history": []
    })
    print(f"   ‚ùå Success: {result2['success']}")
    print(f"   Validation: {result2['validation']}")


def main():
    """Ejecutar todos los ejemplos"""
    print("\n")
    print("‚ïî" + "="*78 + "‚ïó")
    print("‚ïë" + " "*15 + "EJEMPLOS - ARQUITECTURA H√çBRIDA" + " "*32 + "‚ïë")
    print("‚ïë" + " "*20 + "LangChain + LangGraph" + " "*37 + "‚ïë")
    print("‚ïö" + "="*78 + "‚ïù")

    try:
        # Ejemplo 1: AgentAdapter
        ejemplo_1_agent_adapter()

        # Ejemplo 2: Orchestrator
        # ejemplo_2_orchestrator_basico()  # Requiere DB

        # Ejemplo 3: ScheduleAgentGraph
        # ejemplo_3_schedule_agent_graph()  # Requiere DB

        # Ejemplo 4: Compatibilidad API
        # ejemplo_4_comparacion_api()  # Requiere DB

        # Ejemplo 5: Validadores personalizados
        ejemplo_5_validadores_personalizados()

    except Exception as e:
        logger.exception(f"Error ejecutando ejemplos: {e}")
        print(f"\n‚ùå Error: {e}")
        print("\nNOTA: Algunos ejemplos requieren base de datos y configuraci√≥n completa.")

    print("\n" + "="*80)
    print("‚úÖ Ejemplos completados")
    print("="*80 + "\n")


if __name__ == "__main__":
    main()
