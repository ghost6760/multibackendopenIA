# Conversations Blueprint - An√°lisis Completo de Endpoints

## Informaci√≥n General
- **Blueprint**: `conversations`
- **URL Prefix**: Sin prefix (endpoints directos)
- **Decorador Com√∫n**: `@handle_errors` (en todos los endpoints)
- **Autenticaci√≥n**: No requiere API key (endpoints de aplicaci√≥n)
- **Multi-tenant**: S√≠ (extrae company_id de m√∫ltiples fuentes)

---

## Extracci√≥n de Company ID

### Funci√≥n Helper: `_get_company_id_from_request()`
**Orden de Prioridad**:
1. Header `X-Company-ID`
2. Query parameter `company_id`
3. JSON body `company_id`
4. Default: `'benova'`

**Uso en Headers**:
```http
X-Company-ID: spa_wellness
```

---

## 1. GESTI√ìN DE CONVERSACIONES

### 1.1 Listar Conversaciones
**Endpoint**: `GET /conversations`

**Headers**:
- `X-Company-ID: <company_id>` (opcional, usa 'benova' por defecto)

**Par√°metros de Query**:
- `company_id` (string, opcional): ID de empresa (alternativo al header)
- `page` (integer, opcional): N√∫mero de p√°gina (default: 1)
- `page_size` (integer, opcional): Tama√±o de p√°gina (default: 50, m√°ximo: 100)

**Formato de Respuesta**:
```json
{
  "success": true,
  "data": {
    "conversations": [
      {
        "user_id": "string",
        "last_message": "string",
        "timestamp": "string",
        "message_count": number,
        "company_id": "string"
      }
    ],
    "pagination": {
      "page": number,
      "page_size": number,
      "total_conversations": number,
      "total_pages": number
    },
    "company_id": "string"
  }
}
```

### 1.2 Obtener Conversaci√≥n Espec√≠fica
**Endpoint**: `GET /conversations/<user_id>`

**Headers**:
- `X-Company-ID: <company_id>` (opcional)

**Par√°metros de URL**:
- `user_id` (string, requerido): ID del usuario

**Par√°metros de Query**:
- `company_id` (string, opcional): ID de empresa

**Formato de Respuesta**:
```json
{
  "success": true,
  "data": {
    "user_id": "string",
    "company_id": "string",
    "conversation_history": [
      {
        "timestamp": "string",
        "user_message": "string",
        "bot_response": "string",
        "agent_used": "string",
        "response_time": number
      }
    ],
    "total_messages": number,
    "first_interaction": "string",
    "last_interaction": "string",
    "conversation_summary": {
      "status": "active|completed|abandoned",
      "topics_discussed": ["string"],
      "agents_used": ["string"]
    }
  }
}
```

### 1.3 Eliminar Conversaci√≥n
**Endpoint**: `DELETE /conversations/<user_id>`

**Headers**:
- `X-Company-ID: <company_id>` (opcional)

**Par√°metros de URL**:
- `user_id` (string, requerido): ID del usuario

**Par√°metros de Query**:
- `company_id` (string, opcional): ID de empresa

**Formato de Respuesta**:
```json
{
  "success": true,
  "data": {
    "company_id": "string",
    "message": "Conversation {user_id} deleted"
  }
}
```

---

## 2. TESTING Y DESARROLLO

### 2.1 Probar Conversaci√≥n
**Endpoint**: `POST /conversations/<user_id>/test`

**Headers**:
- `Content-Type: application/json`
- `X-Company-ID: <company_id>` (opcional)

**Par√°metros de URL**:
- `user_id` (string, requerido): ID del usuario para testing

**Body**:
```json
{
  "message": "string (requerido)",
  "company_id": "string (opcional, alternativo al header)"
}
```

**Formato de Respuesta**:
```json
{
  "success": true,
  "data": {
    "company_id": "string",
    "user_id": "string",
    "user_message": "string",
    "bot_response": "string",
    "agent_used": "string",
    "timestamp": number
  }
}
```

---

## Caracter√≠sticas Especiales

### **Multi-Tenant Support**
- **Flexible Company ID**: Acepta company_id desde headers, query params o JSON body
- **Validaci√≥n de Empresa**: Verifica que company_id existe antes de procesar
- **Aislamiento de Datos**: Cada empresa tiene sus propias conversaciones separadas
- **Fallback por Defecto**: Usa 'benova' si no se especifica company_id

### **Integraci√≥n con Sistema Multi-Agente**
- **ConversationManager**: Gestiona el historial de conversaciones por empresa
- **Multi-Agent Factory**: Obtiene el orchestrator espec√≠fico de cada empresa
- **Prompt Service**: Integraci√≥n con sistema de prompts PostgreSQL-first
- **Logging Detallado**: Rastrea qu√© prompts y agentes se est√°n usando

### **Paginaci√≥n y Performance**
- **Paginaci√≥n**: Sistema de p√°ginas para listar conversaciones
- **L√≠mite de Tama√±o**: M√°ximo 100 conversaciones por p√°gina
- **Optimizaci√≥n**: Solo carga datos necesarios para cada request

---

## Patrones de Error Comunes

**400 Bad Request** (Datos inv√°lidos):
```json
{
  "success": false,
  "error": "Message is required",
  "code": 400
}
```

```json
{
  "success": false,
  "error": "Invalid company_id: invalid_company",
  "code": 400
}
```

**404 Not Found** (Conversaci√≥n no encontrada):
```json
{
  "success": false,
  "error": "Conversation not found for user user123 in company spa_wellness",
  "code": 404
}
```

**500 Internal Server Error**:
```json
{
  "success": false,
  "error": "Failed to test conversation",
  "code": 500
}
```

**503 Service Unavailable** (Sistema multi-agente no disponible):
```json
{
  "success": false,
  "error": "Multi-agent system not available for company: spa_wellness",
  "code": 503
}
```

---

## Casos de Uso T√≠picos

### **1. Listar Conversaciones de una Empresa**
```http
GET /conversations?company_id=spa_wellness&page=1&page_size=20
```

### **2. Ver Historial Completo de Usuario**
```http
GET /conversations/user123
X-Company-ID: spa_wellness
```

### **3. Probar Bot con Mensaje Espec√≠fico**
```http
POST /conversations/test_user/test
Content-Type: application/json
X-Company-ID: spa_wellness

{
  "message": "Hola, quiero informaci√≥n sobre tratamientos faciales"
}
```

### **4. Limpiar Conversaci√≥n de Usuario**
```http
DELETE /conversations/user123?company_id=spa_wellness
```

---

## Integraci√≥n con Otros Servicios

### **ConversationManager**
- Gestiona persistencia de conversaciones en Redis
- Separa datos por empresa usando redis_prefix
- Maneja paginaci√≥n y b√∫squeda de conversaciones

### **Multi-Agent Factory**
- Obtiene orchestrator espec√≠fico por empresa
- Rutea mensajes al agente apropiado
- Maneja respuestas contextuales

### **Prompt Service**
- Integraci√≥n con sistema PostgreSQL-first de prompts
- Logging de qu√© prompts se est√°n usando
- Fallback autom√°tico si PostgreSQL no est√° disponible

### **Company Manager**
- Validaci√≥n de company_id antes de procesar requests
- Configuraci√≥n espec√≠fica por empresa
- Aislamiento de datos entre empresas

---

## Logging y Debugging

### **Logs Detallados** (similares a preview de prompts):
```
üîç [TESTER] Testing conversation for spa_wellness
   ‚Üí User: test_user
   ‚Üí Message: Hola, quiero informaci√≥n sobre...
Getting prompts for company: spa_wellness
Retrieved prompts for spa_wellness: 6 agents
ConversationManager initialized for company: spa_wellness
```

### **Informaci√≥n de Debug**:
- Company ID utilizado
- Usuario involucrado
- Mensaje enviado (truncado)
- Agentes disponibles
- Servicio de prompts consultado

---

## Notas de Implementaci√≥n

1. **Sin URL Prefix**: Los endpoints est√°n directamente en la ra√≠z (ej: `/conversations`, no `/api/conversations`)
2. **Flexibilidad de Company ID**: M√∫ltiples formas de especificar la empresa
3. **Validaci√≥n Consistente**: Todos los endpoints validan company_id antes de procesar
4. **Error Handling**: Manejo robusto de errores con c√≥digos HTTP apropiados
5. **Testing Ready**: Endpoint espec√≠fico para probar conversaciones sin afectar datos reales

Este blueprint proporciona una API completa para la gesti√≥n de conversaciones en un entorno multi-tenant, con capacidades de testing y debugging integradas.
